{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\n\n// initialState, with light/dark mode, user info, authentication token, array of posts\nconst initialState = {\n  mode: \"light\",\n  user: null,\n  token: null,\n  posts: []\n};\n// actions\nconst setMode = () => {\n  return {\n    type: \"SET_MODE\"\n  };\n};\nconst setLogin = (user, token) => {\n  return {\n    type: \"SET_LOGIN\",\n    payload: {\n      user,\n      token\n    }\n  };\n};\nconst setLogout = () => {\n  return {\n    type: \"SET_LOGOUT\"\n  };\n};\nconst setFriends = friends => {\n  return {\n    type: \"SET_FRIENDS\",\n    payload: {\n      friends\n    }\n  };\n};\nconst setPOST = post => {\n  return {\n    type: \"SET_POST\",\n    payload: {\n      post\n    }\n  };\n};\nconst setPOSTS = posts => {\n  return {\n    type: \"SET_POSTS\",\n    payload: {\n      posts\n    }\n  };\n};\n\n// reducers\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"SET_MODE\":\n      return {\n        ...state,\n        mode: state.mode === \"light\" ? \"dark\" : \"light\"\n      };\n    case \"SET_LOGIN\":\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token\n      };\n    case \"SET_FRIENDS\":\n      if (state.user) {\n        return {\n          ...state,\n          friends: action.payload.friends\n        };\n      } else {\n        console.log(\"user friends do not exist\");\n        return state;\n      }\n    case \"SET_POSTS\":\n      return {\n        ...state,\n        posts: action.payload.posts\n      };\n    case \"SET_POST\":\n      const updatedPosts = state.posts.map(post => {\n        if (post._id === action.payload.post._id) {\n          return action.payload.post;\n        }\n        return post;\n      });\n      return {\n        ...state,\n        posts: updatedPosts\n      };\n    default:\n      return state;\n  }\n};\nconst store = configureStore = {\n  reducer: \"authReducer\",\n  middleware: []\n};\nconst addFriend = () => {\n  store.dispatch({\n    ty\n  });\n};\nexport default authReducer;\nexport { setMode, setFriends, setLogin, setLogout, setPOST, setPOSTS };","map":{"version":3,"names":["configureStore","initialState","mode","user","token","posts","setMode","type","setLogin","payload","setLogout","setFriends","friends","setPOST","post","setPOSTS","authReducer","state","action","console","log","updatedPosts","map","_id","store","reducer","middleware","addFriend","dispatch","ty"],"sources":["C:/Users/Andy/Downloads/Fullstack-RWD-Social-App/src/state/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\n// initialState, with light/dark mode, user info, authentication token, array of posts\r\nconst initialState = {\r\n  mode: \"light\",\r\n  user: null,\r\n  token: null,\r\n  posts: [],\r\n};\r\n// actions\r\nconst setMode = () => {\r\n  return {\r\n    type: \"SET_MODE\",\r\n  };\r\n};\r\nconst setLogin = (user, token) => {\r\n  return {\r\n    type: \"SET_LOGIN\",\r\n    payload: { user, token },\r\n  };\r\n};\r\nconst setLogout = () => {\r\n  return {\r\n    type: \"SET_LOGOUT\",\r\n  };\r\n};\r\nconst setFriends = (friends) => {\r\n  return {\r\n    type: \"SET_FRIENDS\",\r\n    payload: { friends },\r\n  };\r\n};\r\n\r\nconst setPOST = (post) => {\r\n  return {\r\n    type: \"SET_POST\",\r\n    payload: { post },\r\n  };\r\n};\r\n\r\nconst setPOSTS = (posts) => {\r\n  return {\r\n    type: \"SET_POSTS\",\r\n    payload: { posts },\r\n  };\r\n};\r\n\r\n// reducers\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_MODE\":\r\n      return {\r\n        ...state,\r\n        mode: state.mode === \"light\" ? \"dark\" : \"light\",\r\n      };\r\n    case \"SET_LOGIN\":\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n      };\r\n    case \"SET_FRIENDS\":\r\n      if (state.user) {\r\n        return {\r\n          ...state,\r\n          friends: action.payload.friends,\r\n        };\r\n      } else {\r\n        console.log(\"user friends do not exist\");\r\n        return state;\r\n      }\r\n    case \"SET_POSTS\":\r\n      return {\r\n        ...state,\r\n        posts: action.payload.posts,\r\n      };\r\n    case \"SET_POST\":\r\n      const updatedPosts = state.posts.map((post) => {\r\n        if (post._id === action.payload.post._id) {\r\n          return action.payload.post;\r\n        }\r\n        return post;\r\n      });\r\n      return {\r\n        ...state,\r\n        posts: updatedPosts,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nconst store = (configureStore = {\r\n  reducer: \"authReducer\",\r\n  middleware: [],\r\n});\r\n\r\nconst addFriend=()=>{\r\n  store.dispatch({ty})\r\n}\r\n\r\nexport default authReducer;\r\nexport { setMode, setFriends, setLogin, setLogout, setPOST, setPOSTS };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}