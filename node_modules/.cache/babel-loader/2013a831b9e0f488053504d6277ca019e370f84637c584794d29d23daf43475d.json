{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andy\\\\Downloads\\\\Fullstack-RWD-Social-App\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// This file uses the redux-persist package from npmjs.\n// https://www.npmjs.com/package/redux-persist\n\nimport authReducer from \"state\";\n// create Redux store with predefined config\nimport { configureStore } from \"@reduxjs/toolkit\";\n// use Provider to provide Redux store for all components\nimport { Provider } from \"react-redux\";\n// rehydrate Redux store across sessions with common Persist functions\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\n// integrate redux-persist with localStorage using storage engine & PersistGate component\nimport storage from \"redux-persist/lib/storage\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\n// add persistence to Redux store\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, authReducer);\n// create a new Redux store using the persisted root reducer, based on tutorial from positronx.io\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoreActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(PersistGate, {\n      loading: null,\n      persistor: persistStore(store),\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","authReducer","configureStore","Provider","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","PersistGate","persistConfig","key","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoreActions","root","createRoot","document","getElementById","render"],"sources":["C:/Users/Andy/Downloads/Fullstack-RWD-Social-App/src/index.js"],"sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\n// This file uses the redux-persist package from npmjs.\r\n// https://www.npmjs.com/package/redux-persist\r\n\r\nimport authReducer from \"state\";\r\n// create Redux store with predefined config\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n// use Provider to provide Redux store for all components\r\nimport { Provider } from \"react-redux\";\r\n// rehydrate Redux store across sessions with common Persist functions\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n// integrate redux-persist with localStorage using storage engine & PersistGate component\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\n// add persistence to Redux store\r\nconst persistConfig = { key: \"root\", storage };\r\nconst persistedReducer = persistReducer(persistConfig, authReducer);\r\n// create a new Redux store using the persisted root reducer, based on tutorial from positronx.io\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoreActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* persistStore(store) creates a Redux Persistor that saves \r\n      and rehydrates app state; passed to PersistGate for rendering.\r\n      loading= {null} ensures the app doesn't display a loading screen while the persisted state is being retrieved*/}\r\n      <PersistGate loading={null} persistor={persistStore(store)}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>\r\n);\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;;AAEvB;AACA;;AAEA,OAAOC,WAAW,MAAM,OAAO;AAC/B;AACA,SAASC,cAAc,QAAQ,kBAAkB;AACjD;AACA,SAASC,QAAQ,QAAQ,aAAa;AACtC;AACA,SACEC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AACtB;AACA,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,SAASC,WAAW,QAAQ,iCAAiC;;AAE7D;AAAA;AACA,MAAMC,aAAa,GAAG;EAAEC,GAAG,EAAE,MAAM;EAAEH;AAAQ,CAAC;AAC9C,MAAMI,gBAAgB,GAAGX,cAAc,CAACS,aAAa,EAAEb,WAAW,CAAC;AACnE;AACA,MAAMgB,KAAK,GAAGf,cAAc,CAAC;EAC3BgB,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,aAAa,EAAE,CAAChB,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACnE;EACF,CAAC;AACL,CAAC,CAAC;AAEF,MAAMY,IAAI,GAAGxB,QAAQ,CAACyB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACT,QAAC,KAAK,CAAC,UAAU;EAAA,uBACf,QAAC,QAAQ;IAAC,KAAK,EAAEV,KAAM;IAAA,uBAIrB,QAAC,WAAW;MAAC,OAAO,EAAE,IAAK;MAAC,SAAS,EAAEb,YAAY,CAACa,KAAK,CAAE;MAAA,uBACzD,QAAC,GAAG;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACK;IAAA;IAAA;IAAA;EAAA;AACL;EAAA;EAAA;EAAA;AAAA,QACM,CACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}